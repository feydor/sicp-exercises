#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 44 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 14 #"Iosevka Comfy\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 0 0 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 0 0 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 95 175 0 0 0 -1 -1
2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 95 175 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 135 0 0 0 0 -1 -1
2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 135 0 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 215 0 0 0 0 0 -1 -1
2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 215 0 0 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 26
#"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 2360 0 18 3 66
#"; SICP 1.3 - Formulating abstractions with higher-order procedures"
0 0 27 29 1 #"\n"
0 0 30 3 12 #"#lang racket"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 23 #"; summation from a to b"
0 0 27 29 1 #"\n"
0 0 18 3 9 #"; params:"
0 0 27 29 1 #"\n"
0 0 18 3 27 #"; a    - the starting index"
0 0 27 29 1 #"\n"
0 0 18 3 25 #"; b    - the ending index"
0 0 27 29 1 #"\n"
0 0 18 3 33 #"; term - a function for the terms"
0 0 27 29 1 #"\n"
0 0 18 3 42 #"; next - a function to increment the index"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"sum"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 24 3 1 #"0"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 3 #"sum"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 2 #" ("
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #") "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 34 #"; sum of the cubes between a and b"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"sum-cubes"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"sum"
0 0 27 3 1 #" "
0 0 14 3 4 #"cube"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 3 #"inc"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 37 #"; sum of the integers between a and b"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"sum-integers"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"sum"
0 0 27 3 1 #" "
0 0 14 3 8 #"identity"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 3 #"inc"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 32 #"; term = 1 / (x * 2x), x -> x+ 4"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"pi-sum"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"sum"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 1 #"/"
0 0 27 3 1 #" "
0 0 24 3 3 #"1.0"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 14 3 1 #"a"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 24 3 1 #"4"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 14 3 1 #"b"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"pi-aprox"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"8"
0 0 27 3 2 #" ("
0 0 14 3 6 #"pi-sum"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 24 3 4 #"1000"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 61
#"; numerical aproximation of the integral of f between a and b"
0 0 27 29 1 #"\n"
0 0 18 3 71
(
 #"; (integral f) =~ [f(a+dx/2) + f((a+dx)+dx/2) + f((a+2dx)+dx/2)+...]"
 #"*dx"
) 0 0 27 29 1 #"\n"
0 0 18 3 45 #"; ex: (integral cube 0 1 0.001) = 0.249999875"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"integral"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #" "
0 0 14 3 2 #"dx"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 27 3 2 #" ("
0 0 14 3 3 #"sum"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #" ("
0 0 14 3 1 #"/"
0 0 27 3 1 #" "
0 0 14 3 2 #"dx"
0 0 27 3 1 #" "
0 0 24 3 3 #"2.0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 2 #"dx"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 14 3 2 #"dx"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 23 #"; 1.29 - Simpson's rule"
0 0 27 29 1 #"\n"
0 0 18 3 34 #"; integral(f) =~ h/3(sum of terms)"
0 0 27 29 1 #"\n"
0 0 18 3 19 #"; where h = (b-a)/n"
0 0 27 29 1 #"\n"
0 0 18 3 50 #"; where term = (coefficient)f(a + kh) for kth term"
0 0 27 29 1 #"\n"
0 0 18 3 61
#"; where coefficient = 4 if odd, 2 if even, 1 if first or last"
0 0 27 29 1 #"\n"
0 0 18 3 9 #"; params:"
0 0 27 29 1 #"\n"
0 0 18 3 22 #"; n - accuracy (~1000)"
0 0 27 29 1 #"\n"
0 0 18 3 54 #"; ex: (integral-simpson cube 0 1 1000) = 0.25033333333"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 16 #"integral-simpson"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #" ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #") "
0 0 14 3 1 #"n"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 1 #"y"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 1 #"f"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 27 3 2 #" ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 4 #"odd?"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 2 #") "
0 0 24 3 1 #"4"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          (("
0 0 14 3 5 #"even?"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          (("
0 0 14 3 2 #"or"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 3 #") ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 3 #")) "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 1 #"y"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"h"
0 0 27 3 2 #" ("
0 0 14 3 3 #"sum"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #" "
0 0 14 3 3 #"inc"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 3 #")) "
0 0 24 3 1 #"3"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 26 #"; 1.30 iterative summation"
0 0 27 29 1 #"\n"
0 0 18 3 29 #"; result -> result + (term a)"
0 0 27 29 1 #"\n"
0 0 18 3 20 #"; a      -> (next a)"
0 0 27 29 1 #"\n"
0 0 18 3 8 #"; ai = 0"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"sum-iter"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 6 #"result"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 14 3 6 #"result"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"iter"
0 0 27 3 2 #" ("
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 3 #") ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 6 #"result"
0 0 27 3 2 #" ("
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 36 #"; 1.31 iterative product from a to b"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"product"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 6 #"result"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 14 3 6 #"result"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"iter"
0 0 27 3 2 #" ("
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 3 #") ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 6 #"result"
0 0 27 3 2 #" ("
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 24 #"; 1.32 recursive product"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"product-recur"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 24 3 1 #"1"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 27 3 2 #" ("
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 13 #"product-recur"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 2 #" ("
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #") "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 7 #"product"
0 0 27 3 1 #" "
0 0 14 3 8 #"identity"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 3 #"inc"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 46 #"; 1.32 Wallis's product; approximation of pi/2"
0 0 27 29 1 #"\n"
0 0 18 3 48 #"; pi/2 =~ (2n/(2n -1))*(2n/2n + 1) for n = 0...N"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"wallis"
0 0 27 3 1 #" "
0 0 14 3 1 #"N"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 27 3 2 #" ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 1 #"-"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 7 #"product"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 24 3 3 #"1.0"
0 0 27 3 1 #" "
0 0 14 3 3 #"inc"
0 0 27 3 1 #" "
0 0 14 3 1 #"N"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"pi-wallis"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 2 #" ("
0 0 14 3 6 #"wallis"
0 0 27 3 1 #" "
0 0 24 3 4 #"1000"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 50 #"; 1.32 generalized sum and product into a combiner"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"accumulate"
0 0 27 3 1 #" "
0 0 14 3 8 #"combiner"
0 0 27 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 14 3 10 #"null-value"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 8 #"combiner"
0 0 27 3 2 #" ("
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 10 #"accumulate"
0 0 27 3 1 #" "
0 0 14 3 8 #"combiner"
0 0 27 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 27 29 1 #"\n"
0 0 27 3 28 #"                            "
0 0 14 3 4 #"term"
0 0 27 3 2 #" ("
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #") "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 28 #"; iterative version of above"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"accumulate-iter"
0 0 27 3 1 #" "
0 0 14 3 8 #"combiner"
0 0 27 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 6 #"result"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 14 3 6 #"result"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"iter"
0 0 27 3 2 #" ("
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 3 #") ("
0 0 14 3 8 #"combiner"
0 0 27 3 1 #" "
0 0 14 3 6 #"result"
0 0 27 3 2 #" ("
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"acc-sum"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 15 #"accumulate-iter"
0 0 27 3 1 #" "
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"acc-prod"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 15 #"accumulate-iter"
0 0 27 3 1 #" "
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 53 #"; 1.33 generalized accumulate with a filter condition"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 19 #"filtered-accumulate"
0 0 27 3 1 #" "
0 0 14 3 10 #"predicate?"
0 0 27 3 1 #" "
0 0 14 3 8 #"combiner"
0 0 27 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 27 3 1 #" "
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #">"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 14 3 10 #"null-value"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 8 #"combiner"
0 0 27 3 2 #" ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 10 #"predicate?"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 19 #"                  ("
0 0 14 3 4 #"term"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                  "
0 0 14 3 10 #"null-value"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 19 #"filtered-accumulate"
0 0 27 3 1 #" "
0 0 14 3 10 #"predicate?"
0 0 27 3 1 #" "
0 0 14 3 8 #"combiner"
0 0 27 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 27 29 1 #"\n"
0 0 27 3 35 #"                                   "
0 0 14 3 4 #"term"
0 0 27 3 2 #" ("
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #") "
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 63
#"; 1.33a sum of the squares of the prime numbers between a and b"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 17 #"sum-prime-squares"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 19 #"filtered-accumulate"
0 0 27 3 1 #" "
0 0 14 3 6 #"prime?"
0 0 27 3 1 #" "
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #" "
0 0 14 3 6 #"square"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 3 #"inc"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 83
(
 #"; 1.33b the product of all the positive integers < n that are relati"
 #"vely prime to n"
) 0 0 27 29 1 #"\n"
0 0 18 3 15 #"; GCD(i, n) = 1"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 22 #"product-prime-integers"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"relative-prime?"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 3 #"gcd"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 19 #"filtered-accumulate"
0 0 27 3 1 #" "
0 0 14 3 15 #"relative-prime?"
0 0 27 3 1 #" "
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 8 #"identity"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 3 #"inc"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 33 #"; f(x,y) = x(a)^2 + y(b) + (b)(a)"
0 0 27 29 1 #"\n"
0 0 18 3 63
#"; where a = 1+xy, b = 1-y are local variables defined using let"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 1 #"a"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 1 #"b"
0 0 27 3 2 #" ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #" ("
0 0 14 3 6 #"square"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 64
#"; half-interval method for finding roots of an equation f(x) = 0"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 20 #"half-interval-method"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 7 #"a-value"
0 0 27 3 2 #" ("
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 7 #"b-value"
0 0 27 3 2 #" ("
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 18 3 49 #"; test for negative and positive inputs to search"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 9 #"negative?"
0 0 27 3 1 #" "
0 0 14 3 7 #"a-value"
0 0 27 3 3 #") ("
0 0 14 3 9 #"positive?"
0 0 27 3 1 #" "
0 0 14 3 7 #"b-value"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 6 #"search"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          (("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 9 #"negative?"
0 0 27 3 1 #" "
0 0 14 3 7 #"b-value"
0 0 27 3 3 #") ("
0 0 14 3 9 #"positive?"
0 0 27 3 1 #" "
0 0 14 3 7 #"a-value"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 6 #"search"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 33 #"\"Values are not of opposite sign\""
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"search"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 9 #"neg-point"
0 0 27 3 1 #" "
0 0 14 3 9 #"pos-point"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 8 #"midpoint"
0 0 27 3 2 #" ("
0 0 14 3 7 #"average"
0 0 27 3 1 #" "
0 0 14 3 9 #"neg-point"
0 0 27 3 1 #" "
0 0 14 3 9 #"pos-point"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 13 #"close-enough?"
0 0 27 3 1 #" "
0 0 14 3 9 #"neg-point"
0 0 27 3 1 #" "
0 0 14 3 9 #"pos-point"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"       "
0 0 14 3 8 #"midpoint"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 10 #"test-value"
0 0 27 3 2 #" ("
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 8 #"midpoint"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 9 #"positive?"
0 0 27 3 1 #" "
0 0 14 3 10 #"test-value"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 6 #"search"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 9 #"neg-point"
0 0 27 3 1 #" "
0 0 14 3 8 #"midpoint"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                (("
0 0 14 3 9 #"negative?"
0 0 27 3 1 #" "
0 0 14 3 10 #"test-value"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 6 #"search"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 8 #"midpoint"
0 0 27 3 1 #" "
0 0 14 3 9 #"pos-point"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 27 3 1 #" "
0 0 14 3 8 #"midpoint"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"close-enough?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 1 #"<"
0 0 27 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 27 3 2 #" ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 3 #")) "
0 0 24 3 5 #"0.001"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"pi-hf"
0 0 27 3 3 #") ("
0 0 14 3 20 #"half-interval-method"
0 0 27 3 1 #" "
0 0 14 3 3 #"sin"
0 0 27 3 1 #" "
0 0 24 3 3 #"2.0"
0 0 27 3 1 #" "
0 0 24 3 3 #"4.0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 38 #"; finding fixed points of a function f"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 9 #"tolerance"
0 0 27 3 1 #" "
0 0 24 3 7 #"0.00001"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"fixed-point"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 11 #"first-guess"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"close-enough?"
0 0 27 3 1 #" "
0 0 14 3 2 #"v1"
0 0 27 3 1 #" "
0 0 14 3 2 #"v2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 1 #"<"
0 0 27 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 27 3 2 #" ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 14 3 2 #"v1"
0 0 27 3 1 #" "
0 0 14 3 2 #"v2"
0 0 27 3 3 #")) "
0 0 14 3 9 #"tolerance"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"try"
0 0 27 3 1 #" "
0 0 14 3 5 #"guess"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 27 3 1 #" "
0 0 14 3 5 #"guess"
0 0 27 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 4 #"next"
0 0 27 3 2 #" ("
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 5 #"guess"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 13 #"close-enough?"
0 0 27 3 1 #" "
0 0 14 3 5 #"guess"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"          "
0 0 14 3 4 #"next"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 3 #"try"
0 0 27 3 1 #" "
0 0 14 3 4 #"next"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"try"
0 0 27 3 1 #" "
0 0 14 3 11 #"first-guess"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 11 #"; sqrt of x"
0 0 27 29 1 #"\n"
0 0 18 3 45 #"; y^2 = x, 2y = (x/y + y), y = (1/2)(y + x/y)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 11 #"fixed-point"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"y"
0 0 27 3 3 #") ("
0 0 14 3 7 #"average"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 2 #" ("
0 0 14 3 1 #"/"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"               "
0 0 24 3 3 #"1.0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 50 #"; 1.35 golden ratio as fixed-point of x -> 1 + 1/x"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"phi"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 11 #"fixed-point"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 1 #"/"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 3 #")) "
0 0 24 3 3 #"1.0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 29 #"; 1.36 solution to x^x = 1000"
0 0 27 29 1 #"\n"
0 0 18 3 44 #"; 10 steps with damping, 35 steps without it"
0 0 27 29 1 #"\n"
0 0 18 3 56 #"; where damping is (average x f(x)) instead of just f(x)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 2 #"xx"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 54 #"; (fixed-point (lambda (x) (/ (log 1000) (log x))) 2))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 11 #"fixed-point"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 3 #") ("
0 0 14 3 7 #"average"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #" ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 3 #"log"
0 0 27 3 1 #" "
0 0 24 3 4 #"1000"
0 0 27 3 3 #") ("
0 0 14 3 3 #"log"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 5 #")))) "
0 0 24 3 1 #"2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 26 #"; 1.37 continued fractions"
0 0 27 29 1 #"\n"
0 0 18 3 9 #"; params:"
0 0 27 29 1 #"\n"
0 0 18 3 27 #"; n - gives numerator of k,"
0 0 27 29 1 #"\n"
0 0 18 3 29 #"; d - gives denominator of k,"
0 0 27 29 1 #"\n"
0 0 18 3 54 #"; k - k-terms of a finite continue fraction to compute"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"cont-frac"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 14 3 1 #"d"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 26 #"; linear recursive process"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 16 3 5 #"recur"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 14 3 1 #"i"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 1 #"d"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 16 3 5 #"recur"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 19 #"; iterative process"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 29 #"; a (result) -> ni / (di + a)"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 6 #"result"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 14 3 6 #"result"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"iter"
0 0 27 3 2 #" ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 18 #"                 ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 6 #"result"
0 0 27 3 2 #" ("
0 0 14 3 1 #"d"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 18 3 10 #";(recur 0)"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 24 #"; 1/phi ~= 0.61803398875"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"inv-phi"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 9 #"cont-frac"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"i"
0 0 27 3 2 #") "
0 0 24 3 3 #"1.0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"i"
0 0 27 3 2 #") "
0 0 24 3 3 #"1.0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"             "
0 0 24 3 3 #"100"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 59
#"; 1.38 approximation of e using Euler's expansion for e - 2"
0 0 27 29 1 #"\n"
0 0 18 3 14 #"; e ~= 2.71828"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 1 #"e"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 9 #"cont-frac"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"i"
0 0 27 3 2 #") "
0 0 24 3 3 #"1.0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 14 3 12 #"euler-series"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"                "
0 0 24 3 3 #"100"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 38 #"; 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, ..."
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"euler-series"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"3"
0 0 27 3 2 #") "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 2 #" ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 2 #") "
0 0 24 3 1 #"3"
0 0 27 3 3 #")) "
0 0 18 3 47 #"; twice the number of the triplet in the series"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 37 #"; displays n elements of the series f"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"display-series"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 16 3 5 #"recur"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 27 3 2 #" ("
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 4 #")) ("
0 0 14 3 7 #"display"
0 0 27 3 1 #" "
0 0 20 3 4 #"\", \""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 7 #"newline"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 5 #"recur"
0 0 27 3 2 #" ("
0 0 14 3 3 #"inc"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"recur"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 31 #"; 1.39 aproximation for tangent"
0 0 27 29 1 #"\n"
0 0 18 3 22 #"; k - steps to compute"
0 0 27 29 1 #"\n"
0 0 18 3 13 #"; tan(45) = 1"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"tan-cf"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"k"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 9 #"cont-frac"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"i"
0 0 27 3 3 #") ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 2 #") "
0 0 14 3 1 #"x"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 24 3 2 #"-1"
0 0 27 3 4 #"))) "
0 0 18 3 6 #"; -x^2"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"i"
0 0 27 3 3 #") ("
0 0 14 3 1 #"-"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 24 3 3 #"2.0"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 2 #") "
0 0 24 3 1 #"1"
0 0 27 3 13 #"))           "
0 0 18 3 27 #"; i -> (multiples of 2) - 1"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"             "
0 0 24 3 3 #"100"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 19 #"; helper procedures"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"identity"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #") "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"square"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 3 #") ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cube"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 3 #") ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"inc"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 3 #") ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 8 #"divides?"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 3 #") ("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 2 #") "
0 0 24 3 1 #"0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 3 #") ("
0 0 14 3 1 #">"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"negative?"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 3 #") ("
0 0 14 3 1 #"<"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"average"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 3 #") ("
0 0 14 3 1 #"/"
0 0 27 3 2 #" ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 2 #") "
0 0 24 3 3 #"2.0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 59
#"; iterative exponentiation b^n by successive multiplication"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"pow"
0 0 27 3 1 #" "
0 0 14 3 4 #"base"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 3 #"res"
0 0 27 3 1 #" "
0 0 14 3 4 #"base"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 2 #") "
0 0 14 3 3 #"res"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          (("
0 0 14 3 5 #"even?"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 3 #") ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 3 #"res"
0 0 27 29 1 #"\n"
0 0 27 3 30 #"                             ("
0 0 14 3 6 #"square"
0 0 27 3 1 #" "
0 0 14 3 4 #"base"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 30 #"                             ("
0 0 14 3 1 #"/"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 3 #"res"
0 0 27 3 1 #" "
0 0 14 3 4 #"base"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                      "
0 0 14 3 4 #"base"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 14 3 4 #"base"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 4 #"base"
0 0 27 3 1 #" "
0 0 14 3 3 #"exp"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 74
(
 #"; prime? - testing for divisiblity via successive integers starting "
 #"with 2"
) 0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 21 #"find-divisor-improved"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 21 #"find-divisor-improved"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 1 #">"
0 0 27 3 2 #" ("
0 0 14 3 6 #"square"
0 0 27 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 27 3 2 #") "
0 0 14 3 1 #"n"
0 0 27 3 2 #") "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        (("
0 0 14 3 8 #"divides?"
0 0 27 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #") "
0 0 14 3 12 #"test-divisor"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 21 #"find-divisor-improved"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #" ("
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"next"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"      "
0 0 24 3 1 #"3"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #" "
0 0 24 3 1 #"2"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 38 #"; iterative euclid's algorithm for GCD"
0 0 27 29 1 #"\n"
0 0 18 3 16 #"; steps: O(logn)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 3 #"gcd"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 1 #" "
0 0 24 3 1 #"0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 14 3 1 #"a"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 3 #"gcd"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"b"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"fact"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"<"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"        "
0 0 14 3 1 #"a"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"iter"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 1 #"a"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 3 #") ("
0 0 14 3 1 #"-"
0 0 27 3 1 #" "
0 0 14 3 1 #"i"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 27 3 1 #" "
0 0 24 3 1 #"1"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0           0
